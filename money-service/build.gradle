plugins {
    id("com.palantir.docker") version "0.36.0"
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
}

group = 'com.ash.money'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}


apply {
    plugin('java')
    plugin('java-library')
    plugin('org.springframework.boot')
    plugin('io.spring.dependency-management')
}

compileJava {
    sourceCompatibility = 17;
    targetCompatibility = 17;
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation(group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.1')
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testRuntimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java:8.0.33'

    // common 프로젝트 의존성 추가
    implementation project(':common')

    implementation 'org.jetbrains:annotations:24.0.1'
    testImplementation 'junit:junit:4.13.2'
}

tasks.register("prepareKotlinBuildScriptModel") {}

tasks.named('test') {
    useJUnitPlatform()
}

docker {
    println('bootJar' + tasks.bootJar.outputs.files)
    name rootProject.name + '-' + project.name + ':' + version
    print('Docker Project :: ' + name)
    dockerfile file('../Dockerfile')

    files tasks.bootJar.outputs.files
    buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name])
}